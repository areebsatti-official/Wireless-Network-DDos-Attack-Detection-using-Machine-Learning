# -*- coding: utf-8 -*-
"""Wireless Sensor ML Assignment # 03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1naRhoPYB1MXCyJ88faF2kLGZ3gf5fDH8

#Load Dataset
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from scipy.stats import zscore
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/drive/MyDrive/ML-Datasets/WSN-DS-New.csv')

"""#Explore Dataset"""

df.head()

df.describe()

df.info()

df['label'].value_counts()

"""#Data Preprocessing"""

df.isnull().sum()

z_scores = np.abs(zscore(df.select_dtypes(include=np.number)))
df = df[(z_scores < 3).all(axis=1)]

"""#Distribution of Classes"""

class_counts = df['label'].value_counts()

class_counts

sns.countplot(x='label', data=df)
plt.title('Class Distribution')
plt.show()

"""#Balance the Dataset"""

X = df.drop('label', axis=1)
y = df['label']

smote = SMOTE(random_state=42)
X_balanced, y_balanced = smote.fit_resample(X, y)

df_balanced = pd.DataFrame(X_balanced, columns=X.columns)
df_balanced['label'] = y_balanced

df_balanced['label'].value_counts()

sns.countplot(x='label', data=df_balanced)
plt.title('Balanced Class Distribution')
plt.show()

"""#Data Visulations"""

sns.set(style='whitegrid')

"""**Histograms**"""

df_balanced.hist(figsize=(15, 10), bins=30, edgecolor='black')
plt.suptitle('Histograms of All Features', fontsize=20)
plt.subplots_adjust(hspace=1)
plt.show()

"""**Piecharts**"""

class_counts = df_balanced['label'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(class_counts, labels=class_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('hsv', len(class_counts)))
plt.title('Class Distribution')
plt.show()

"""**Box Plots**"""

plt.figure(figsize=(20, 15))
for i, column in enumerate(df_balanced.select_dtypes(include=np.number).columns, 1):
    plt.subplot(4, 5, i)
    sns.boxplot(x='label', y=column, data=df_balanced, hue='label', palette='hsv', legend=False)
    plt.title(f'Box Plot of {column} by Class')
    plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**Pair Plots**"""

sns.pairplot(df_balanced.sample(1000), hue='label', palette='hsv', markers=['o', 's', 'D', 'P', 'X'])
plt.suptitle('Pair Plot of Features Colored by Class', y=1.02, fontsize=20)
plt.show()

"""**Corelation Matrix & Heat Map**"""

non_numeric_columns = df_balanced.select_dtypes(include=['object', 'category']).columns
print(non_numeric_columns)

df_encoded = df_balanced.copy()

from sklearn.preprocessing import LabelEncoder

label_encoders = {}
for col in non_numeric_columns:
    le = LabelEncoder()
    df_encoded[col] = le.fit_transform(df_encoded[col])
    label_encoders[col] = le

corr_matrix = df_encoded.corr()

corr_matrix

plt.figure(figsize=(15, 10))
sns.heatmap(corr_matrix, annot=False, fmt='.2f', cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix')
plt.show()

"""#Feature Engineering

**Extract Relevant Features**
"""

df_balanced.head()

"""**Dimensionality Reduction**"""

X = df_balanced.drop('label', axis=1)
y = df_balanced['label']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

pca = PCA(n_components=0.95)
X_pca = pca.fit_transform(X_scaled)

X.shape[1]

X_pca.shape[1]

"""**Encode Categorical Variables and Scale Numerical Features**"""

categorical_cols = df_balanced.select_dtypes(include=['object', 'category']).columns

categorical_cols

for col in categorical_cols:
    le = LabelEncoder()
    df_balanced[col] = le.fit_transform(df_balanced[col])

X = df_balanced.drop('label', axis=1)
y = df_balanced['label']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)
X_scaled_df.head()

"""#Model Selection and Building

**Split the Preprocessed Dataset**
"""

X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.05, random_state=42)

X_train.shape[0]

X_test.shape[0]

from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
nb_pred = nb_model.predict(X_test)
nb_accuracy = accuracy_score(y_test, nb_pred)
print('Naive Bayes Accuracy: {:.4f}'.format(nb_accuracy))
print(classification_report(y_test, nb_pred))

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)
dt_accuracy = accuracy_score(y_test, dt_pred)
print('Decision Tree Accuracy: {:.4f}'.format(dt_accuracy))
print(classification_report(y_test, dt_pred))

knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)
knn_pred = knn_model.predict(X_test)
knn_accuracy = accuracy_score(y_test, knn_pred)
print('KNN Accuracy: {:.4f}'.format(knn_accuracy))
print(classification_report(y_test, knn_pred))

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)
print('Random Forest Accuracy: {:.4f}'.format(rf_accuracy))
print(classification_report(y_test, rf_pred))

from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, classification_report

base_learners = [
    ('nb', GaussianNB()),
    ('dt', DecisionTreeClassifier(random_state=42)),
    ('knn', KNeighborsClassifier()),
    ('rf', RandomForestClassifier(random_state=42))
]

stacking_model = StackingClassifier(
    estimators=base_learners,
    final_estimator=LogisticRegression(),
    cv=5
)

stacking_model.fit(X_train, y_train)

y_pred_stack = stacking_model.predict(X_test)

accuracy_stack = accuracy_score(y_test, y_pred_stack)
print(f'Stacking Ensemble Model Accuracy: {accuracy_stack:.4f}')
print(classification_report(y_test, y_pred_stack))

best_models = {
    'Naive Bayes': nb_model,
    'Decision Tree': dt_model,
    'K-Nearest Neighbors': knn_model,
    'Random Forest': rf_model
}

# Evaluate each model and generate classification report
from sklearn.metrics import classification_report

for name, model in best_models.items():
    print(f'Evaluation Report for {name}:')
    y_pred = model.predict(X_test)
    print(classification_report(y_test, y_pred))

# Plot AUC-ROC curve for each model
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import LabelBinarizer
from scipy import interp
import matplotlib.pyplot as plt

# Function to plot ROC curves for multi-class classification
def plot_roc_curve(y_true, y_score, classes):
    lb = LabelBinarizer()
    y_true_bin = lb.fit_transform(y_true)
    n_classes = len(classes)
    fpr = dict()
    tpr = dict()
    roc_auc = dict()
    for i in range(n_classes):
        fpr[i], tpr[i], _ = roc_curve(y_true_bin[:, i], y_score[:, i])
        roc_auc[i] = auc(fpr[i], tpr[i])

    # Compute micro-average ROC curve and ROC area
    fpr["micro"], tpr["micro"], _ = roc_curve(y_true_bin.ravel(), y_score.ravel())
    roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

    # Compute macro-average ROC curve and ROC area
    all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
    mean_tpr = np.zeros_like(all_fpr)
    for i in range(n_classes):
        mean_tpr += interp(all_fpr, fpr[i], tpr[i])
    mean_tpr /= n_classes
    fpr["macro"] = all_fpr
    tpr["macro"] = mean_tpr
    roc_auc["macro"] = auc(fpr["macro"], tpr["macro"])

    # Plot ROC curves
    plt.figure(figsize=(10, 8))
    plt.plot(fpr["micro"], tpr["micro"],
             label=f'Micro-average ROC curve (area = {roc_auc["micro"]:0.2f})',
             color='deeppink', linestyle=':', linewidth=4)

    plt.plot(fpr["macro"], tpr["macro"],
             label=f'Macro-average ROC curve (area = {roc_auc["macro"]:0.2f})',
             color='navy', linestyle=':', linewidth=4)

    colors = ['aqua', 'darkorange', 'cornflowerblue', 'green', 'red']
    for i, color in zip(range(n_classes), colors):
        plt.plot(fpr[i], tpr[i], color=color, lw=2,
                 label=f'ROC curve of class {classes[i]} (area = {roc_auc[i]:0.2f})')

    plt.plot([0, 1], [0, 1], 'k--', lw=2)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve for Multi-Class Classification')
    plt.legend(loc='lower right')
    plt.show()

# Plot AUC-ROC curve for each model
for name, model in best_models.items():
    y_score = model.predict_proba(X_test)
    plot_roc_curve(y_test, y_score, model.classes_)

# Plot confusion matrices for each model
from sklearn.metrics import confusion_matrix
import itertools

# Function to plot confusion matrix
def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()

# Compute confusion matrix for each model
for name, model in best_models.items():
    y_pred = model.predict(X_test)
    cnf_matrix = confusion_matrix(y_test, y_pred)
    np.set_printoptions(precision=2)

    # Plot non-normalized confusion matrix
    plt.figure()
    plot_confusion_matrix(cnf_matrix, classes=model.classes_,
                          title=f'Confusion Matrix for {name}')
    plt.show()